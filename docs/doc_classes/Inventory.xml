<?xml version="1.0" encoding="UTF-8" ?>
<class name="Inventory" inherits="NodeInventories" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		This node is a stack container.
	</brief_description>
	<description>
		Each stack contains data about amount, [ItemStack](with String item_id from [InventoryDatabase]) and custom properties.
		Stacks are stored in an Array, which can be accessed with inventory.stacks, but it is best to avoid changing data directly and instead use methods within this node, such as [method add], [method remove], [method set_stack_content], ...
		The methods correctly call signals when necessary.

		Some methods have their general version and a direct version of some [Stack] index, such as [method contains] and [method contains_at].
	</description>
	<tutorials>
		<link title="Add items to inventory">https://github.com/expressobits/inventory-system/wiki/Inventory-Node#Add-items-to-inventory</link>
	</tutorials>
	<methods>
		<method name="add">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<param index="3" name="drop_excess" type="bool" default="false" />
			<description>
				Adds an amount of [ItemStack] to the inventory and returns the amount that cannot be added.
				[codeblocks]
				[gdscript]
				inventory.add("my_item_id", 2) # Add two my_item_id to inventory
				[/gdscript]
				[/codeblocks]

				There are cases where the inventory may be full or does not accept this item by its category, so the return of this call corresponds to the quantity that was not added (If it returns 0 it means that all items were added correctly)
				[codeblocks]
				[gdscript]
				var unadded_amount = inventory.add("my_item_id", 2) # Add two my_item to inventory
				if unadded_amount == 0:
				    print("All items added!")
				else:
				    print(unadded_amount, " items were not added")
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="add_at_index">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<description>
				Adds an amount of [ItemStack](with string id from [InventoryDatabase]) to a specific inventory stack index and returns the amount that cannot be added.
				[codeblocks]
				[gdscript]
				inventory.add_at_index(3, "my_item_id", 2) # Add two my_item to inventory in 3 slot index
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="add_on_new_stack">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<param index="3" name="can_emit_signal" type="bool" default="true" />
			<description>
				Add [param item_id] to a new stack, ignoring the possibility of adding that item to an existing stack.
			</description>
		</method>
		<method name="add_to_stack">
			<return type="int" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<description>
			</description>
		</method>
		<method name="amount_of_item" qualifiers="const">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<description>
				Returns amount of the specified [ItemStack].
			</description>
		</method>
		<method name="can_add_new_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
				Returns true if it is possible to add a new stack to the inventory, note that this method consults the configured constraints.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="contains" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Returns true if contains the amount of the specified [ItemStack](with String item_id from [InventoryDatabase]).
			</description>
		</method>
		<method name="contains_at" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Returns true if the slot index contains the amount of the specified [ItemStack](with String item_id from [InventoryDatabase]).
			</description>
		</method>
		<method name="contains_category" qualifiers="const">
			<return type="bool" />
			<param index="0" name="category" type="ItemCategory" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Returns true if contains the amount of [ItemStack](with String item_id from [InventoryDatabase]) with the specified [ItemCategory].
			</description>
		</method>
		<method name="contains_category_in_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="category" type="ItemCategory" />
			<description>
			</description>
		</method>
		<method name="deserialize">
			<return type="void" />
			<param index="0" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="drop">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
			</description>
		</method>
		<method name="drop_all_stacks">
			<return type="void" />
			<description>
				Drop all stacks on inventory, [request_drop_obj] signal is emitted for each stack.
			</description>
		</method>
		<method name="drop_from_inventory">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
			</description>
		</method>
		<method name="get_amount" qualifiers="const">
			<return type="int" />
			<description>
				Returns amount of items.
			</description>
		</method>
		<method name="get_amount_of_category" qualifiers="const">
			<return type="int" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
				Returns amount of the specified [ItemCategory].
			</description>
		</method>
		<method name="get_stack_index_with_an_item_of_category" qualifiers="const">
			<return type="int" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
			</description>
		</method>
		<method name="has_space_for" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
			</description>
		</method>
		<method name="has_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack" type="ItemStack" />
			<description>
			</description>
		</method>
		<method name="is_accept_any_categories" qualifiers="const">
			<return type="bool" />
			<param index="0" name="categories_flag" type="int" />
			<param index="1" name="slot" type="ItemCategory[]" />
			<description>
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if inventory is empty.
			</description>
		</method>
		<method name="is_full" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if inventory is full.
			</description>
		</method>
		<method name="remove">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Removes a amount of the [ItemStack](with String item_id from [InventoryDatabase]) from inventory and returns the amount that was not removed.
			</description>
		</method>
		<method name="remove_at">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Removes an item_id amount to the specified inventory [Slot] index and returns the remaining value that was not removed.
			</description>
		</method>
		<method name="remove_from_stack">
			<return type="int" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Remove slot with [param stack] parameter, set [param emit_signal] to false to disable events called by [method update_stack].
			</description>
		</method>
		<method name="remove_stack">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<description>
			</description>
		</method>
		<method name="serialize" qualifiers="const">
			<return type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="set_stack_content">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<description>
			</description>
		</method>
		<method name="split">
			<return type="bool" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
			</description>
		</method>
		<method name="transfer">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="destination" type="Inventory" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Transfer the contents of the stack_index [param stack_index] of this inventory to another inventory ([param destination]).
				Note: If amount is -1 (default value), the entire contents of the stack are sent to another inventory.
			</description>
		</method>
		<method name="transfer_at">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="destination" type="Inventory" />
			<param index="2" name="destination_stack_index" type="int" />
			<param index="3" name="amount" type="int" default="1" />
			<description>
				Transfer the contents of the stack_index [param stack_index] of this inventory to another stack_index ([param destination_stack_index]) of destination [Inventory].
				Note: If amount is -1 (default value), the entire contents of the stack are sent to another inventory.
			</description>
		</method>
		<method name="update_stack">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="constraints" type="InventoryConstraint[]" setter="set_constraints" getter="get_constraints" default="[]">
		</member>
		<member name="inventory_name" type="String" setter="set_inventory_name" getter="get_inventory_name" default="&quot;Inventory&quot;">
			The name of the inventory, to be displayed in UI.
		</member>
		<member name="stacks" type="ItemStack[]" setter="set_stacks" getter="get_stacks" default="[]">
		</member>
	</members>
	<signals>
		<signal name="contents_changed">
			<description>
			</description>
		</signal>
		<signal name="emptied">
			<description>
				Emitted when inventory is empty. This signal is emitted after the [method remove], [method remove_at] or [method set_stack_content] function and it only happens when there are no stacks.
			</description>
		</signal>
		<signal name="filled">
			<description>
				Emitted when inventory is filled. This signal is emitted after the [method add], [method add_at] or [method set_stack_content] function and it only happens when all stacks are filled.
			</description>
		</signal>
		<signal name="item_added">
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" />
			<description>
				Emitted when a [Item] was added.
			</description>
		</signal>
		<signal name="item_removed">
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" />
			<description>
				Emitted when a [Item] was removed.
			</description>
		</signal>
		<signal name="request_drop_obj">
			<param index="0" name="drop_item_packed_scene_path" type="String" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" />
			<param index="3" name="item_properties" type="Dictionary" />
			<description>
				Emitted when the [method drop] method is called (Usually called within [method drop_from_inventory] or [method drop_all_stacks]).
			</description>
		</signal>
		<signal name="stack_added">
			<param index="0" name="stack_index" type="int" />
			<description>
			</description>
		</signal>
		<signal name="stack_removed">
			<param index="0" name="stack_index" type="int" />
			<description>
			</description>
		</signal>
		<signal name="updated_stack">
			<param index="0" name="stack_index" type="int" />
			<description>
			</description>
		</signal>
	</signals>
</class>
